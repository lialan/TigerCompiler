-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from TigerParser.y
-----------------------------------------------------------------------------

state 16 contains 1 shift/reduce conflicts.
state 24 contains 2 reduce/reduce conflicts.
state 27 contains 3 shift/reduce conflicts.
state 45 contains 12 shift/reduce conflicts.
state 46 contains 12 shift/reduce conflicts.
state 47 contains 12 shift/reduce conflicts.
state 48 contains 12 shift/reduce conflicts.
state 49 contains 12 shift/reduce conflicts.
state 50 contains 12 shift/reduce conflicts.
state 51 contains 12 shift/reduce conflicts.
state 52 contains 12 shift/reduce conflicts.
state 53 contains 12 shift/reduce conflicts.
state 54 contains 12 shift/reduce conflicts.
state 55 contains 12 shift/reduce conflicts.
state 56 contains 12 shift/reduce conflicts.
state 57 contains 12 shift/reduce conflicts.
state 64 contains 1 shift/reduce conflicts.
state 66 contains 1 shift/reduce conflicts.
state 72 contains 1 shift/reduce conflicts.
state 76 contains 2 shift/reduce conflicts.
state 87 contains 13 shift/reduce conflicts.
state 95 contains 12 shift/reduce conflicts.
state 109 contains 12 shift/reduce conflicts.
state 110 contains 12 shift/reduce conflicts.
state 132 contains 12 shift/reduce conflicts.

rule 35 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_tigerParser -> program                      (0)
	program -> exp                                     (1)
	exp -> lvalue                                      (2)
	exp -> "nil"                                       (3)
	exp -> "(" ")"                                     (4)
	exp -> int_literal                                 (5)
	exp -> string_literal                              (6)
	exp -> funcall                                     (7)
	exp -> arith_exp                                   (8)
	exp -> comp_exp                                    (9)
	exp -> bool_exp                                    (10)
	exp -> record_create                               (11)
	exp -> array_create                                (12)
	exp -> lvalue ":=" exp                             (13)
	exp -> "if" exp "then" exp "else" exp              (14)
	exp -> "if" exp "then" exp                         (15)
	exp -> "while" exp "do" exp                        (16)
	exp -> "for" ident ":=" exp "to" exp "do" exp      (17)
	exp -> "break"                                     (18)
	exp -> "let" decs "in" exp "end"                   (19)
	exp -> "(" expseq ")"                              (20)
	funcall -> ident "(" explist ")"                   (21)
	arith_exp -> exp "+" exp                           (22)
	arith_exp -> exp "-" exp                           (23)
	arith_exp -> exp "*" exp                           (24)
	arith_exp -> exp "/" exp                           (25)
	comp_exp -> exp "=" exp                            (26)
	comp_exp -> exp "<>" exp                           (27)
	comp_exp -> exp "<" exp                            (28)
	comp_exp -> exp ">" exp                            (29)
	comp_exp -> exp "<=" exp                           (30)
	comp_exp -> exp ">=" exp                           (31)
	bool_exp -> exp "&" exp                            (32)
	bool_exp -> exp "|" exp                            (33)
	record_create -> ident "(" record_create_list ")"   (34)
	record_create_list ->                              (35)
	record_create_list -> record_create_field          (36)
	record_create_list -> record_create_list "," record_create_field   (37)
	record_create_field -> ident "=" exp               (38)
	array_create -> ident "[" exp "]" "of" exp         (39)
	decs ->                                            (40)
	decs -> decs dec                                   (41)
	dec -> tydeclist                                   (42)
	dec -> vardec                                      (43)
	dec -> fundeclist                                  (44)
	tydec -> "type" ident "=" ty                       (45)
	tydeclist -> tydec                                 (46)
	tydeclist -> tydeclist tydec                       (47)
	vardec -> "var" ident ":=" exp                     (48)
	vardec -> "var" ident ":" ident ":=" exp           (49)
	fundeclist ->                                      (50)
	fundeclist -> fundeclist fundec                    (51)
	fundec -> "function" ident "(" tyfields ")" "=" exp   (52)
	fundec -> "function" ident "(" tyfields ")" ":" ident "=" exp   (53)
	ty -> ident                                        (54)
	ty -> "{" tyfields "}"                             (55)
	ty -> "array" "of" ident                           (56)
	tyfield -> ident ":" ident                         (57)
	tyfields ->                                        (58)
	tyfields -> tyfield                                (59)
	tyfields -> tyfields "," tyfield                   (60)
	expseq -> exp                                      (61)
	expseq -> expseq ";" exp                           (62)
	explist ->                                         (63)
	explist -> exp                                     (64)
	explist -> explist "," exp                         (65)
	lvalue -> ident                                    (66)
	lvalue -> ident "(" exp ")"                        (67)
	lvalue -> lvalue "(" exp ")"                       (68)
	lvalue -> lvalue "." ident                         (69)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"while"        { TWhile }
	"for"          { TFor }
	"to"           { TTo }
	"break"        { TBreak }
	"let"          { TLet }
	"in"           { TIn }
	"end"          { TEnd }
	"function"     { TFunction }
	"var"          { TVar }
	"type"         { TType }
	"array"        { TArray }
	"if"           { TIf }
	"then"         { TThen }
	"else"         { TElse }
	"do"           { TDo }
	"of"           { TOf }
	"nil"          { TNil }
	ident          { TIdent $$ }
	int_literal    { TIntLit $$ }
	string_literal { TStrLit $$ }
	","            { TComma }
	":"            { TColon }
	";"            { TSemicolon }
	"("            { TLParen }
	")"            { TRParen }
	"["            { TLBracket }
	"]"            { TRBracket }
	"{"            { TLBrace }
	"}"            { TRBrace }
	"."            { TDot }
	"+"            { TPlus }
	"-"            { TMinus }
	"*"            { TTimes }
	"/"            { TDivide }
	"="            { TEq }
	"<>"           { TNeq }
	"<="           { TLe }
	">="           { TGe }
	"<"            { TLt }
	">"            { TGt }
	":="           { TAssign }
	"&"            { TAnd }
	"|"            { TOr }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_tigerParser rule  0
	program         rule  1
	exp             rules 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
	funcall         rule  21
	arith_exp       rules 22, 23, 24, 25
	comp_exp        rules 26, 27, 28, 29, 30, 31
	bool_exp        rules 32, 33
	record_create   rule  34
	record_create_list rules 35, 36, 37
	record_create_field rule  38
	array_create    rule  39
	decs            rules 40, 41
	dec             rules 42, 43, 44
	tydec           rule  45
	tydeclist       rules 46, 47
	vardec          rules 48, 49
	fundeclist      rules 50, 51
	fundec          rules 52, 53
	ty              rules 54, 55, 56
	tyfield         rule  57
	tyfields        rules 58, 59, 60
	expseq          rules 61, 62
	explist         rules 63, 64, 65
	lvalue          rules 66, 67, 68, 69

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	program        goto state 20
	exp            goto state 2
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 1


	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 2
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 2

	program -> exp .                                    (rule 1)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44
	%eof           reduce using rule 1


State 3

	exp -> funcall .                                    (rule 7)

	"to"           reduce using rule 7
	"in"           reduce using rule 7
	"end"          reduce using rule 7
	"function"     reduce using rule 7
	"var"          reduce using rule 7
	"type"         reduce using rule 7
	"then"         reduce using rule 7
	"else"         reduce using rule 7
	"do"           reduce using rule 7
	","            reduce using rule 7
	";"            reduce using rule 7
	")"            reduce using rule 7
	"]"            reduce using rule 7
	"+"            reduce using rule 7
	"-"            reduce using rule 7
	"*"            reduce using rule 7
	"/"            reduce using rule 7
	"="            reduce using rule 7
	"<>"           reduce using rule 7
	"<="           reduce using rule 7
	">="           reduce using rule 7
	"<"            reduce using rule 7
	">"            reduce using rule 7
	"&"            reduce using rule 7
	"|"            reduce using rule 7
	%eof           reduce using rule 7


State 4

	exp -> arith_exp .                                  (rule 8)

	"to"           reduce using rule 8
	"in"           reduce using rule 8
	"end"          reduce using rule 8
	"function"     reduce using rule 8
	"var"          reduce using rule 8
	"type"         reduce using rule 8
	"then"         reduce using rule 8
	"else"         reduce using rule 8
	"do"           reduce using rule 8
	","            reduce using rule 8
	";"            reduce using rule 8
	")"            reduce using rule 8
	"]"            reduce using rule 8
	"+"            reduce using rule 8
	"-"            reduce using rule 8
	"*"            reduce using rule 8
	"/"            reduce using rule 8
	"="            reduce using rule 8
	"<>"           reduce using rule 8
	"<="           reduce using rule 8
	">="           reduce using rule 8
	"<"            reduce using rule 8
	">"            reduce using rule 8
	"&"            reduce using rule 8
	"|"            reduce using rule 8
	%eof           reduce using rule 8


State 5

	exp -> comp_exp .                                   (rule 9)

	"to"           reduce using rule 9
	"in"           reduce using rule 9
	"end"          reduce using rule 9
	"function"     reduce using rule 9
	"var"          reduce using rule 9
	"type"         reduce using rule 9
	"then"         reduce using rule 9
	"else"         reduce using rule 9
	"do"           reduce using rule 9
	","            reduce using rule 9
	";"            reduce using rule 9
	")"            reduce using rule 9
	"]"            reduce using rule 9
	"+"            reduce using rule 9
	"-"            reduce using rule 9
	"*"            reduce using rule 9
	"/"            reduce using rule 9
	"="            reduce using rule 9
	"<>"           reduce using rule 9
	"<="           reduce using rule 9
	">="           reduce using rule 9
	"<"            reduce using rule 9
	">"            reduce using rule 9
	"&"            reduce using rule 9
	"|"            reduce using rule 9
	%eof           reduce using rule 9


State 6

	exp -> bool_exp .                                   (rule 10)

	"to"           reduce using rule 10
	"in"           reduce using rule 10
	"end"          reduce using rule 10
	"function"     reduce using rule 10
	"var"          reduce using rule 10
	"type"         reduce using rule 10
	"then"         reduce using rule 10
	"else"         reduce using rule 10
	"do"           reduce using rule 10
	","            reduce using rule 10
	";"            reduce using rule 10
	")"            reduce using rule 10
	"]"            reduce using rule 10
	"+"            reduce using rule 10
	"-"            reduce using rule 10
	"*"            reduce using rule 10
	"/"            reduce using rule 10
	"="            reduce using rule 10
	"<>"           reduce using rule 10
	"<="           reduce using rule 10
	">="           reduce using rule 10
	"<"            reduce using rule 10
	">"            reduce using rule 10
	"&"            reduce using rule 10
	"|"            reduce using rule 10
	%eof           reduce using rule 10


State 7

	exp -> record_create .                              (rule 11)

	"to"           reduce using rule 11
	"in"           reduce using rule 11
	"end"          reduce using rule 11
	"function"     reduce using rule 11
	"var"          reduce using rule 11
	"type"         reduce using rule 11
	"then"         reduce using rule 11
	"else"         reduce using rule 11
	"do"           reduce using rule 11
	","            reduce using rule 11
	";"            reduce using rule 11
	")"            reduce using rule 11
	"]"            reduce using rule 11
	"+"            reduce using rule 11
	"-"            reduce using rule 11
	"*"            reduce using rule 11
	"/"            reduce using rule 11
	"="            reduce using rule 11
	"<>"           reduce using rule 11
	"<="           reduce using rule 11
	">="           reduce using rule 11
	"<"            reduce using rule 11
	">"            reduce using rule 11
	"&"            reduce using rule 11
	"|"            reduce using rule 11
	%eof           reduce using rule 11


State 8

	exp -> array_create .                               (rule 12)

	"to"           reduce using rule 12
	"in"           reduce using rule 12
	"end"          reduce using rule 12
	"function"     reduce using rule 12
	"var"          reduce using rule 12
	"type"         reduce using rule 12
	"then"         reduce using rule 12
	"else"         reduce using rule 12
	"do"           reduce using rule 12
	","            reduce using rule 12
	";"            reduce using rule 12
	")"            reduce using rule 12
	"]"            reduce using rule 12
	"+"            reduce using rule 12
	"-"            reduce using rule 12
	"*"            reduce using rule 12
	"/"            reduce using rule 12
	"="            reduce using rule 12
	"<>"           reduce using rule 12
	"<="           reduce using rule 12
	">="           reduce using rule 12
	"<"            reduce using rule 12
	">"            reduce using rule 12
	"&"            reduce using rule 12
	"|"            reduce using rule 12
	%eof           reduce using rule 12


State 9

	exp -> lvalue .                                     (rule 2)
	exp -> lvalue . ":=" exp                            (rule 13)
	lvalue -> lvalue . "(" exp ")"                      (rule 68)
	lvalue -> lvalue . "." ident                        (rule 69)

	"to"           reduce using rule 2
	"in"           reduce using rule 2
	"end"          reduce using rule 2
	"function"     reduce using rule 2
	"var"          reduce using rule 2
	"type"         reduce using rule 2
	"then"         reduce using rule 2
	"else"         reduce using rule 2
	"do"           reduce using rule 2
	","            reduce using rule 2
	";"            reduce using rule 2
	"("            shift, and enter state 30
	")"            reduce using rule 2
	"]"            reduce using rule 2
	"."            shift, and enter state 31
	"+"            reduce using rule 2
	"-"            reduce using rule 2
	"*"            reduce using rule 2
	"/"            reduce using rule 2
	"="            reduce using rule 2
	"<>"           reduce using rule 2
	"<="           reduce using rule 2
	">="           reduce using rule 2
	"<"            reduce using rule 2
	">"            reduce using rule 2
	":="           shift, and enter state 32
	"&"            reduce using rule 2
	"|"            reduce using rule 2
	%eof           reduce using rule 2


State 10

	exp -> "while" . exp "do" exp                       (rule 16)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 29
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 11

	exp -> "for" . ident ":=" exp "to" exp "do" exp     (rule 17)

	ident          shift, and enter state 28


State 12

	exp -> "break" .                                    (rule 18)

	"to"           reduce using rule 18
	"in"           reduce using rule 18
	"end"          reduce using rule 18
	"function"     reduce using rule 18
	"var"          reduce using rule 18
	"type"         reduce using rule 18
	"then"         reduce using rule 18
	"else"         reduce using rule 18
	"do"           reduce using rule 18
	","            reduce using rule 18
	";"            reduce using rule 18
	")"            reduce using rule 18
	"]"            reduce using rule 18
	"+"            reduce using rule 18
	"-"            reduce using rule 18
	"*"            reduce using rule 18
	"/"            reduce using rule 18
	"="            reduce using rule 18
	"<>"           reduce using rule 18
	"<="           reduce using rule 18
	">="           reduce using rule 18
	"<"            reduce using rule 18
	">"            reduce using rule 18
	"&"            reduce using rule 18
	"|"            reduce using rule 18
	%eof           reduce using rule 18


State 13

	exp -> "let" . decs "in" exp "end"                  (rule 19)

	"in"           reduce using rule 40
	"function"     reduce using rule 40
	"var"          reduce using rule 40
	"type"         reduce using rule 40

	decs           goto state 27

State 14

	exp -> "if" . exp "then" exp "else" exp             (rule 14)
	exp -> "if" . exp "then" exp                        (rule 15)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 26
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 15

	exp -> "nil" .                                      (rule 3)

	"to"           reduce using rule 3
	"in"           reduce using rule 3
	"end"          reduce using rule 3
	"function"     reduce using rule 3
	"var"          reduce using rule 3
	"type"         reduce using rule 3
	"then"         reduce using rule 3
	"else"         reduce using rule 3
	"do"           reduce using rule 3
	","            reduce using rule 3
	";"            reduce using rule 3
	")"            reduce using rule 3
	"]"            reduce using rule 3
	"+"            reduce using rule 3
	"-"            reduce using rule 3
	"*"            reduce using rule 3
	"/"            reduce using rule 3
	"="            reduce using rule 3
	"<>"           reduce using rule 3
	"<="           reduce using rule 3
	">="           reduce using rule 3
	"<"            reduce using rule 3
	">"            reduce using rule 3
	"&"            reduce using rule 3
	"|"            reduce using rule 3
	%eof           reduce using rule 3


State 16

	funcall -> ident . "(" explist ")"                  (rule 21)
	record_create -> ident . "(" record_create_list ")"    (rule 34)
	array_create -> ident . "[" exp "]" "of" exp        (rule 39)
	lvalue -> ident .                                   (rule 66)
	lvalue -> ident . "(" exp ")"                       (rule 67)

	"to"           reduce using rule 66
	"in"           reduce using rule 66
	"end"          reduce using rule 66
	"function"     reduce using rule 66
	"var"          reduce using rule 66
	"type"         reduce using rule 66
	"then"         reduce using rule 66
	"else"         reduce using rule 66
	"do"           reduce using rule 66
	","            reduce using rule 66
	";"            reduce using rule 66
	"("            shift, and enter state 24
			(reduce using rule 66)

	")"            reduce using rule 66
	"["            shift, and enter state 25
	"]"            reduce using rule 66
	"."            reduce using rule 66
	"+"            reduce using rule 66
	"-"            reduce using rule 66
	"*"            reduce using rule 66
	"/"            reduce using rule 66
	"="            reduce using rule 66
	"<>"           reduce using rule 66
	"<="           reduce using rule 66
	">="           reduce using rule 66
	"<"            reduce using rule 66
	">"            reduce using rule 66
	":="           reduce using rule 66
	"&"            reduce using rule 66
	"|"            reduce using rule 66
	%eof           reduce using rule 66


State 17

	exp -> int_literal .                                (rule 5)

	"to"           reduce using rule 5
	"in"           reduce using rule 5
	"end"          reduce using rule 5
	"function"     reduce using rule 5
	"var"          reduce using rule 5
	"type"         reduce using rule 5
	"then"         reduce using rule 5
	"else"         reduce using rule 5
	"do"           reduce using rule 5
	","            reduce using rule 5
	";"            reduce using rule 5
	")"            reduce using rule 5
	"]"            reduce using rule 5
	"+"            reduce using rule 5
	"-"            reduce using rule 5
	"*"            reduce using rule 5
	"/"            reduce using rule 5
	"="            reduce using rule 5
	"<>"           reduce using rule 5
	"<="           reduce using rule 5
	">="           reduce using rule 5
	"<"            reduce using rule 5
	">"            reduce using rule 5
	"&"            reduce using rule 5
	"|"            reduce using rule 5
	%eof           reduce using rule 5


State 18

	exp -> string_literal .                             (rule 6)

	"to"           reduce using rule 6
	"in"           reduce using rule 6
	"end"          reduce using rule 6
	"function"     reduce using rule 6
	"var"          reduce using rule 6
	"type"         reduce using rule 6
	"then"         reduce using rule 6
	"else"         reduce using rule 6
	"do"           reduce using rule 6
	","            reduce using rule 6
	";"            reduce using rule 6
	")"            reduce using rule 6
	"]"            reduce using rule 6
	"+"            reduce using rule 6
	"-"            reduce using rule 6
	"*"            reduce using rule 6
	"/"            reduce using rule 6
	"="            reduce using rule 6
	"<>"           reduce using rule 6
	"<="           reduce using rule 6
	">="           reduce using rule 6
	"<"            reduce using rule 6
	">"            reduce using rule 6
	"&"            reduce using rule 6
	"|"            reduce using rule 6
	%eof           reduce using rule 6


State 19

	exp -> "(" . ")"                                    (rule 4)
	exp -> "(" . expseq ")"                             (rule 20)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19
	")"            shift, and enter state 23

	exp            goto state 21
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	expseq         goto state 22
	lvalue         goto state 9

State 20

	%start_tigerParser -> program .                     (rule 0)

	%eof           accept


State 21

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	expseq -> exp .                                     (rule 61)

	";"            reduce using rule 61
	")"            reduce using rule 61
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 22

	exp -> "(" expseq . ")"                             (rule 20)
	expseq -> expseq . ";" exp                          (rule 62)

	";"            shift, and enter state 77
	")"            shift, and enter state 78


State 23

	exp -> "(" ")" .                                    (rule 4)

	"to"           reduce using rule 4
	"in"           reduce using rule 4
	"end"          reduce using rule 4
	"function"     reduce using rule 4
	"var"          reduce using rule 4
	"type"         reduce using rule 4
	"then"         reduce using rule 4
	"else"         reduce using rule 4
	"do"           reduce using rule 4
	","            reduce using rule 4
	";"            reduce using rule 4
	")"            reduce using rule 4
	"]"            reduce using rule 4
	"+"            reduce using rule 4
	"-"            reduce using rule 4
	"*"            reduce using rule 4
	"/"            reduce using rule 4
	"="            reduce using rule 4
	"<>"           reduce using rule 4
	"<="           reduce using rule 4
	">="           reduce using rule 4
	"<"            reduce using rule 4
	">"            reduce using rule 4
	"&"            reduce using rule 4
	"|"            reduce using rule 4
	%eof           reduce using rule 4


State 24

	funcall -> ident "(" . explist ")"                  (rule 21)
	record_create -> ident "(" . record_create_list ")"    (rule 34)
	lvalue -> ident "(" . exp ")"                       (rule 67)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 76
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	","            reduce using rule 63
			(reduce using rule 35)

	"("            shift, and enter state 19
	")"            reduce using rule 63
			(reduce using rule 35)


	exp            goto state 72
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	record_create_listgoto state 73
	record_create_fieldgoto state 74
	array_create   goto state 8
	explist        goto state 75
	lvalue         goto state 9

State 25

	array_create -> ident "[" . exp "]" "of" exp        (rule 39)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 71
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 26

	exp -> "if" exp . "then" exp "else" exp             (rule 14)
	exp -> "if" exp . "then" exp                        (rule 15)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"then"         shift, and enter state 70
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 27

	exp -> "let" decs . "in" exp "end"                  (rule 19)
	decs -> decs . dec                                  (rule 41)

	"in"           shift, and enter state 67
			(reduce using rule 50)

	"function"     reduce using rule 50
	"var"          shift, and enter state 68
			(reduce using rule 50)

	"type"         shift, and enter state 69
			(reduce using rule 50)


	dec            goto state 62
	tydec          goto state 63
	tydeclist      goto state 64
	vardec         goto state 65
	fundeclist     goto state 66

State 28

	exp -> "for" ident . ":=" exp "to" exp "do" exp     (rule 17)

	":="           shift, and enter state 61


State 29

	exp -> "while" exp . "do" exp                       (rule 16)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"do"           shift, and enter state 60
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 30

	lvalue -> lvalue "(" . exp ")"                      (rule 68)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 59
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 31

	lvalue -> lvalue "." . ident                        (rule 69)

	ident          shift, and enter state 58


State 32

	exp -> lvalue ":=" . exp                            (rule 13)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 57
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 33

	arith_exp -> exp "+" . exp                          (rule 22)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 56
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 34

	arith_exp -> exp "-" . exp                          (rule 23)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 55
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 35

	arith_exp -> exp "*" . exp                          (rule 24)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 54
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 36

	arith_exp -> exp "/" . exp                          (rule 25)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 53
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 37

	comp_exp -> exp "=" . exp                           (rule 26)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 52
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 38

	comp_exp -> exp "<>" . exp                          (rule 27)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 51
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 39

	comp_exp -> exp "<=" . exp                          (rule 30)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 50
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 40

	comp_exp -> exp ">=" . exp                          (rule 31)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 49
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 41

	comp_exp -> exp "<" . exp                           (rule 28)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 48
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 42

	comp_exp -> exp ">" . exp                           (rule 29)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 47
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 43

	bool_exp -> exp "&" . exp                           (rule 32)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 46
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 44

	bool_exp -> exp "|" . exp                           (rule 33)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 45
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 45

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	bool_exp -> exp "|" exp .                           (rule 33)

	"to"           reduce using rule 33
	"in"           reduce using rule 33
	"end"          reduce using rule 33
	"function"     reduce using rule 33
	"var"          reduce using rule 33
	"type"         reduce using rule 33
	"then"         reduce using rule 33
	"else"         reduce using rule 33
	"do"           reduce using rule 33
	","            reduce using rule 33
	";"            reduce using rule 33
	")"            reduce using rule 33
	"]"            reduce using rule 33
	"+"            shift, and enter state 33
			(reduce using rule 33)

	"-"            shift, and enter state 34
			(reduce using rule 33)

	"*"            shift, and enter state 35
			(reduce using rule 33)

	"/"            shift, and enter state 36
			(reduce using rule 33)

	"="            shift, and enter state 37
			(reduce using rule 33)

	"<>"           shift, and enter state 38
			(reduce using rule 33)

	"<="           shift, and enter state 39
			(reduce using rule 33)

	">="           shift, and enter state 40
			(reduce using rule 33)

	"<"            shift, and enter state 41
			(reduce using rule 33)

	">"            shift, and enter state 42
			(reduce using rule 33)

	"&"            shift, and enter state 43
			(reduce using rule 33)

	"|"            shift, and enter state 44
			(reduce using rule 33)

	%eof           reduce using rule 33


State 46

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp "&" exp .                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 32
	"in"           reduce using rule 32
	"end"          reduce using rule 32
	"function"     reduce using rule 32
	"var"          reduce using rule 32
	"type"         reduce using rule 32
	"then"         reduce using rule 32
	"else"         reduce using rule 32
	"do"           reduce using rule 32
	","            reduce using rule 32
	";"            reduce using rule 32
	")"            reduce using rule 32
	"]"            reduce using rule 32
	"+"            shift, and enter state 33
			(reduce using rule 32)

	"-"            shift, and enter state 34
			(reduce using rule 32)

	"*"            shift, and enter state 35
			(reduce using rule 32)

	"/"            shift, and enter state 36
			(reduce using rule 32)

	"="            shift, and enter state 37
			(reduce using rule 32)

	"<>"           shift, and enter state 38
			(reduce using rule 32)

	"<="           shift, and enter state 39
			(reduce using rule 32)

	">="           shift, and enter state 40
			(reduce using rule 32)

	"<"            shift, and enter state 41
			(reduce using rule 32)

	">"            shift, and enter state 42
			(reduce using rule 32)

	"&"            shift, and enter state 43
			(reduce using rule 32)

	"|"            shift, and enter state 44
			(reduce using rule 32)

	%eof           reduce using rule 32


State 47

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp ">" exp .                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 29
	"in"           reduce using rule 29
	"end"          reduce using rule 29
	"function"     reduce using rule 29
	"var"          reduce using rule 29
	"type"         reduce using rule 29
	"then"         reduce using rule 29
	"else"         reduce using rule 29
	"do"           reduce using rule 29
	","            reduce using rule 29
	";"            reduce using rule 29
	")"            reduce using rule 29
	"]"            reduce using rule 29
	"+"            shift, and enter state 33
			(reduce using rule 29)

	"-"            shift, and enter state 34
			(reduce using rule 29)

	"*"            shift, and enter state 35
			(reduce using rule 29)

	"/"            shift, and enter state 36
			(reduce using rule 29)

	"="            shift, and enter state 37
			(reduce using rule 29)

	"<>"           shift, and enter state 38
			(reduce using rule 29)

	"<="           shift, and enter state 39
			(reduce using rule 29)

	">="           shift, and enter state 40
			(reduce using rule 29)

	"<"            shift, and enter state 41
			(reduce using rule 29)

	">"            shift, and enter state 42
			(reduce using rule 29)

	"&"            shift, and enter state 43
			(reduce using rule 29)

	"|"            shift, and enter state 44
			(reduce using rule 29)

	%eof           reduce using rule 29


State 48

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp "<" exp .                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 28
	"in"           reduce using rule 28
	"end"          reduce using rule 28
	"function"     reduce using rule 28
	"var"          reduce using rule 28
	"type"         reduce using rule 28
	"then"         reduce using rule 28
	"else"         reduce using rule 28
	"do"           reduce using rule 28
	","            reduce using rule 28
	";"            reduce using rule 28
	")"            reduce using rule 28
	"]"            reduce using rule 28
	"+"            shift, and enter state 33
			(reduce using rule 28)

	"-"            shift, and enter state 34
			(reduce using rule 28)

	"*"            shift, and enter state 35
			(reduce using rule 28)

	"/"            shift, and enter state 36
			(reduce using rule 28)

	"="            shift, and enter state 37
			(reduce using rule 28)

	"<>"           shift, and enter state 38
			(reduce using rule 28)

	"<="           shift, and enter state 39
			(reduce using rule 28)

	">="           shift, and enter state 40
			(reduce using rule 28)

	"<"            shift, and enter state 41
			(reduce using rule 28)

	">"            shift, and enter state 42
			(reduce using rule 28)

	"&"            shift, and enter state 43
			(reduce using rule 28)

	"|"            shift, and enter state 44
			(reduce using rule 28)

	%eof           reduce using rule 28


State 49

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	comp_exp -> exp ">=" exp .                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 31
	"in"           reduce using rule 31
	"end"          reduce using rule 31
	"function"     reduce using rule 31
	"var"          reduce using rule 31
	"type"         reduce using rule 31
	"then"         reduce using rule 31
	"else"         reduce using rule 31
	"do"           reduce using rule 31
	","            reduce using rule 31
	";"            reduce using rule 31
	")"            reduce using rule 31
	"]"            reduce using rule 31
	"+"            shift, and enter state 33
			(reduce using rule 31)

	"-"            shift, and enter state 34
			(reduce using rule 31)

	"*"            shift, and enter state 35
			(reduce using rule 31)

	"/"            shift, and enter state 36
			(reduce using rule 31)

	"="            shift, and enter state 37
			(reduce using rule 31)

	"<>"           shift, and enter state 38
			(reduce using rule 31)

	"<="           shift, and enter state 39
			(reduce using rule 31)

	">="           shift, and enter state 40
			(reduce using rule 31)

	"<"            shift, and enter state 41
			(reduce using rule 31)

	">"            shift, and enter state 42
			(reduce using rule 31)

	"&"            shift, and enter state 43
			(reduce using rule 31)

	"|"            shift, and enter state 44
			(reduce using rule 31)

	%eof           reduce using rule 31


State 50

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp "<=" exp .                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 30
	"in"           reduce using rule 30
	"end"          reduce using rule 30
	"function"     reduce using rule 30
	"var"          reduce using rule 30
	"type"         reduce using rule 30
	"then"         reduce using rule 30
	"else"         reduce using rule 30
	"do"           reduce using rule 30
	","            reduce using rule 30
	";"            reduce using rule 30
	")"            reduce using rule 30
	"]"            reduce using rule 30
	"+"            shift, and enter state 33
			(reduce using rule 30)

	"-"            shift, and enter state 34
			(reduce using rule 30)

	"*"            shift, and enter state 35
			(reduce using rule 30)

	"/"            shift, and enter state 36
			(reduce using rule 30)

	"="            shift, and enter state 37
			(reduce using rule 30)

	"<>"           shift, and enter state 38
			(reduce using rule 30)

	"<="           shift, and enter state 39
			(reduce using rule 30)

	">="           shift, and enter state 40
			(reduce using rule 30)

	"<"            shift, and enter state 41
			(reduce using rule 30)

	">"            shift, and enter state 42
			(reduce using rule 30)

	"&"            shift, and enter state 43
			(reduce using rule 30)

	"|"            shift, and enter state 44
			(reduce using rule 30)

	%eof           reduce using rule 30


State 51

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp "<>" exp .                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 27
	"in"           reduce using rule 27
	"end"          reduce using rule 27
	"function"     reduce using rule 27
	"var"          reduce using rule 27
	"type"         reduce using rule 27
	"then"         reduce using rule 27
	"else"         reduce using rule 27
	"do"           reduce using rule 27
	","            reduce using rule 27
	";"            reduce using rule 27
	")"            reduce using rule 27
	"]"            reduce using rule 27
	"+"            shift, and enter state 33
			(reduce using rule 27)

	"-"            shift, and enter state 34
			(reduce using rule 27)

	"*"            shift, and enter state 35
			(reduce using rule 27)

	"/"            shift, and enter state 36
			(reduce using rule 27)

	"="            shift, and enter state 37
			(reduce using rule 27)

	"<>"           shift, and enter state 38
			(reduce using rule 27)

	"<="           shift, and enter state 39
			(reduce using rule 27)

	">="           shift, and enter state 40
			(reduce using rule 27)

	"<"            shift, and enter state 41
			(reduce using rule 27)

	">"            shift, and enter state 42
			(reduce using rule 27)

	"&"            shift, and enter state 43
			(reduce using rule 27)

	"|"            shift, and enter state 44
			(reduce using rule 27)

	%eof           reduce using rule 27


State 52

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp "=" exp .                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 26
	"in"           reduce using rule 26
	"end"          reduce using rule 26
	"function"     reduce using rule 26
	"var"          reduce using rule 26
	"type"         reduce using rule 26
	"then"         reduce using rule 26
	"else"         reduce using rule 26
	"do"           reduce using rule 26
	","            reduce using rule 26
	";"            reduce using rule 26
	")"            reduce using rule 26
	"]"            reduce using rule 26
	"+"            shift, and enter state 33
			(reduce using rule 26)

	"-"            shift, and enter state 34
			(reduce using rule 26)

	"*"            shift, and enter state 35
			(reduce using rule 26)

	"/"            shift, and enter state 36
			(reduce using rule 26)

	"="            shift, and enter state 37
			(reduce using rule 26)

	"<>"           shift, and enter state 38
			(reduce using rule 26)

	"<="           shift, and enter state 39
			(reduce using rule 26)

	">="           shift, and enter state 40
			(reduce using rule 26)

	"<"            shift, and enter state 41
			(reduce using rule 26)

	">"            shift, and enter state 42
			(reduce using rule 26)

	"&"            shift, and enter state 43
			(reduce using rule 26)

	"|"            shift, and enter state 44
			(reduce using rule 26)

	%eof           reduce using rule 26


State 53

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	arith_exp -> exp "/" exp .                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 25
	"in"           reduce using rule 25
	"end"          reduce using rule 25
	"function"     reduce using rule 25
	"var"          reduce using rule 25
	"type"         reduce using rule 25
	"then"         reduce using rule 25
	"else"         reduce using rule 25
	"do"           reduce using rule 25
	","            reduce using rule 25
	";"            reduce using rule 25
	")"            reduce using rule 25
	"]"            reduce using rule 25
	"+"            shift, and enter state 33
			(reduce using rule 25)

	"-"            shift, and enter state 34
			(reduce using rule 25)

	"*"            shift, and enter state 35
			(reduce using rule 25)

	"/"            shift, and enter state 36
			(reduce using rule 25)

	"="            shift, and enter state 37
			(reduce using rule 25)

	"<>"           shift, and enter state 38
			(reduce using rule 25)

	"<="           shift, and enter state 39
			(reduce using rule 25)

	">="           shift, and enter state 40
			(reduce using rule 25)

	"<"            shift, and enter state 41
			(reduce using rule 25)

	">"            shift, and enter state 42
			(reduce using rule 25)

	"&"            shift, and enter state 43
			(reduce using rule 25)

	"|"            shift, and enter state 44
			(reduce using rule 25)

	%eof           reduce using rule 25


State 54

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp "*" exp .                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 24
	"in"           reduce using rule 24
	"end"          reduce using rule 24
	"function"     reduce using rule 24
	"var"          reduce using rule 24
	"type"         reduce using rule 24
	"then"         reduce using rule 24
	"else"         reduce using rule 24
	"do"           reduce using rule 24
	","            reduce using rule 24
	";"            reduce using rule 24
	")"            reduce using rule 24
	"]"            reduce using rule 24
	"+"            shift, and enter state 33
			(reduce using rule 24)

	"-"            shift, and enter state 34
			(reduce using rule 24)

	"*"            shift, and enter state 35
			(reduce using rule 24)

	"/"            shift, and enter state 36
			(reduce using rule 24)

	"="            shift, and enter state 37
			(reduce using rule 24)

	"<>"           shift, and enter state 38
			(reduce using rule 24)

	"<="           shift, and enter state 39
			(reduce using rule 24)

	">="           shift, and enter state 40
			(reduce using rule 24)

	"<"            shift, and enter state 41
			(reduce using rule 24)

	">"            shift, and enter state 42
			(reduce using rule 24)

	"&"            shift, and enter state 43
			(reduce using rule 24)

	"|"            shift, and enter state 44
			(reduce using rule 24)

	%eof           reduce using rule 24


State 55

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp "-" exp .                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 23
	"in"           reduce using rule 23
	"end"          reduce using rule 23
	"function"     reduce using rule 23
	"var"          reduce using rule 23
	"type"         reduce using rule 23
	"then"         reduce using rule 23
	"else"         reduce using rule 23
	"do"           reduce using rule 23
	","            reduce using rule 23
	";"            reduce using rule 23
	")"            reduce using rule 23
	"]"            reduce using rule 23
	"+"            shift, and enter state 33
			(reduce using rule 23)

	"-"            shift, and enter state 34
			(reduce using rule 23)

	"*"            shift, and enter state 35
			(reduce using rule 23)

	"/"            shift, and enter state 36
			(reduce using rule 23)

	"="            shift, and enter state 37
			(reduce using rule 23)

	"<>"           shift, and enter state 38
			(reduce using rule 23)

	"<="           shift, and enter state 39
			(reduce using rule 23)

	">="           shift, and enter state 40
			(reduce using rule 23)

	"<"            shift, and enter state 41
			(reduce using rule 23)

	">"            shift, and enter state 42
			(reduce using rule 23)

	"&"            shift, and enter state 43
			(reduce using rule 23)

	"|"            shift, and enter state 44
			(reduce using rule 23)

	%eof           reduce using rule 23


State 56

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp "+" exp .                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 22
	"in"           reduce using rule 22
	"end"          reduce using rule 22
	"function"     reduce using rule 22
	"var"          reduce using rule 22
	"type"         reduce using rule 22
	"then"         reduce using rule 22
	"else"         reduce using rule 22
	"do"           reduce using rule 22
	","            reduce using rule 22
	";"            reduce using rule 22
	")"            reduce using rule 22
	"]"            reduce using rule 22
	"+"            shift, and enter state 33
			(reduce using rule 22)

	"-"            shift, and enter state 34
			(reduce using rule 22)

	"*"            shift, and enter state 35
			(reduce using rule 22)

	"/"            shift, and enter state 36
			(reduce using rule 22)

	"="            shift, and enter state 37
			(reduce using rule 22)

	"<>"           shift, and enter state 38
			(reduce using rule 22)

	"<="           shift, and enter state 39
			(reduce using rule 22)

	">="           shift, and enter state 40
			(reduce using rule 22)

	"<"            shift, and enter state 41
			(reduce using rule 22)

	">"            shift, and enter state 42
			(reduce using rule 22)

	"&"            shift, and enter state 43
			(reduce using rule 22)

	"|"            shift, and enter state 44
			(reduce using rule 22)

	%eof           reduce using rule 22


State 57

	exp -> lvalue ":=" exp .                            (rule 13)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 13
	"in"           reduce using rule 13
	"end"          reduce using rule 13
	"function"     reduce using rule 13
	"var"          reduce using rule 13
	"type"         reduce using rule 13
	"then"         reduce using rule 13
	"else"         reduce using rule 13
	"do"           reduce using rule 13
	","            reduce using rule 13
	";"            reduce using rule 13
	")"            reduce using rule 13
	"]"            reduce using rule 13
	"+"            shift, and enter state 33
			(reduce using rule 13)

	"-"            shift, and enter state 34
			(reduce using rule 13)

	"*"            shift, and enter state 35
			(reduce using rule 13)

	"/"            shift, and enter state 36
			(reduce using rule 13)

	"="            shift, and enter state 37
			(reduce using rule 13)

	"<>"           shift, and enter state 38
			(reduce using rule 13)

	"<="           shift, and enter state 39
			(reduce using rule 13)

	">="           shift, and enter state 40
			(reduce using rule 13)

	"<"            shift, and enter state 41
			(reduce using rule 13)

	">"            shift, and enter state 42
			(reduce using rule 13)

	"&"            shift, and enter state 43
			(reduce using rule 13)

	"|"            shift, and enter state 44
			(reduce using rule 13)

	%eof           reduce using rule 13


State 58

	lvalue -> lvalue "." ident .                        (rule 69)

	"to"           reduce using rule 69
	"in"           reduce using rule 69
	"end"          reduce using rule 69
	"function"     reduce using rule 69
	"var"          reduce using rule 69
	"type"         reduce using rule 69
	"then"         reduce using rule 69
	"else"         reduce using rule 69
	"do"           reduce using rule 69
	","            reduce using rule 69
	";"            reduce using rule 69
	"("            reduce using rule 69
	")"            reduce using rule 69
	"]"            reduce using rule 69
	"."            reduce using rule 69
	"+"            reduce using rule 69
	"-"            reduce using rule 69
	"*"            reduce using rule 69
	"/"            reduce using rule 69
	"="            reduce using rule 69
	"<>"           reduce using rule 69
	"<="           reduce using rule 69
	">="           reduce using rule 69
	"<"            reduce using rule 69
	">"            reduce using rule 69
	":="           reduce using rule 69
	"&"            reduce using rule 69
	"|"            reduce using rule 69
	%eof           reduce using rule 69


State 59

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	lvalue -> lvalue "(" exp . ")"                      (rule 68)

	")"            shift, and enter state 96
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 60

	exp -> "while" exp "do" . exp                       (rule 16)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 95
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 61

	exp -> "for" ident ":=" . exp "to" exp "do" exp     (rule 17)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 94
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 62

	decs -> decs dec .                                  (rule 41)

	"in"           reduce using rule 41
	"function"     reduce using rule 41
	"var"          reduce using rule 41
	"type"         reduce using rule 41


State 63

	tydeclist -> tydec .                                (rule 46)

	"in"           reduce using rule 46
	"function"     reduce using rule 46
	"var"          reduce using rule 46
	"type"         reduce using rule 46


State 64

	dec -> tydeclist .                                  (rule 42)
	tydeclist -> tydeclist . tydec                      (rule 47)

	"in"           reduce using rule 42
	"function"     reduce using rule 42
	"var"          reduce using rule 42
	"type"         shift, and enter state 69
			(reduce using rule 42)


	tydec          goto state 93

State 65

	dec -> vardec .                                     (rule 43)

	"in"           reduce using rule 43
	"function"     reduce using rule 43
	"var"          reduce using rule 43
	"type"         reduce using rule 43


State 66

	dec -> fundeclist .                                 (rule 44)
	fundeclist -> fundeclist . fundec                   (rule 51)

	"in"           reduce using rule 44
	"function"     shift, and enter state 92
			(reduce using rule 44)

	"var"          reduce using rule 44
	"type"         reduce using rule 44

	fundec         goto state 91

State 67

	exp -> "let" decs "in" . exp "end"                  (rule 19)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 90
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 68

	vardec -> "var" . ident ":=" exp                    (rule 48)
	vardec -> "var" . ident ":" ident ":=" exp          (rule 49)

	ident          shift, and enter state 89


State 69

	tydec -> "type" . ident "=" ty                      (rule 45)

	ident          shift, and enter state 88


State 70

	exp -> "if" exp "then" . exp "else" exp             (rule 14)
	exp -> "if" exp "then" . exp                        (rule 15)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 87
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 71

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	array_create -> ident "[" exp . "]" "of" exp        (rule 39)

	"]"            shift, and enter state 86
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 72

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	explist -> exp .                                    (rule 64)
	lvalue -> ident "(" exp . ")"                       (rule 67)

	","            reduce using rule 64
	")"            shift, and enter state 85
			(reduce using rule 64)

	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 73

	record_create -> ident "(" record_create_list . ")"    (rule 34)
	record_create_list -> record_create_list . "," record_create_field    (rule 37)

	","            shift, and enter state 83
	")"            shift, and enter state 84


State 74

	record_create_list -> record_create_field .         (rule 36)

	","            reduce using rule 36
	")"            reduce using rule 36


State 75

	funcall -> ident "(" explist . ")"                  (rule 21)
	explist -> explist . "," exp                        (rule 65)

	","            shift, and enter state 81
	")"            shift, and enter state 82


State 76

	funcall -> ident . "(" explist ")"                  (rule 21)
	record_create -> ident . "(" record_create_list ")"    (rule 34)
	record_create_field -> ident . "=" exp              (rule 38)
	array_create -> ident . "[" exp "]" "of" exp        (rule 39)
	lvalue -> ident .                                   (rule 66)
	lvalue -> ident . "(" exp ")"                       (rule 67)

	","            reduce using rule 66
	"("            shift, and enter state 24
			(reduce using rule 66)

	")"            reduce using rule 66
	"["            shift, and enter state 25
	"."            reduce using rule 66
	"+"            reduce using rule 66
	"-"            reduce using rule 66
	"*"            reduce using rule 66
	"/"            reduce using rule 66
	"="            shift, and enter state 80
			(reduce using rule 66)

	"<>"           reduce using rule 66
	"<="           reduce using rule 66
	">="           reduce using rule 66
	"<"            reduce using rule 66
	">"            reduce using rule 66
	":="           reduce using rule 66
	"&"            reduce using rule 66
	"|"            reduce using rule 66


State 77

	expseq -> expseq ";" . exp                          (rule 62)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 79
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 78

	exp -> "(" expseq ")" .                             (rule 20)

	"to"           reduce using rule 20
	"in"           reduce using rule 20
	"end"          reduce using rule 20
	"function"     reduce using rule 20
	"var"          reduce using rule 20
	"type"         reduce using rule 20
	"then"         reduce using rule 20
	"else"         reduce using rule 20
	"do"           reduce using rule 20
	","            reduce using rule 20
	";"            reduce using rule 20
	")"            reduce using rule 20
	"]"            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	"="            reduce using rule 20
	"<>"           reduce using rule 20
	"<="           reduce using rule 20
	">="           reduce using rule 20
	"<"            reduce using rule 20
	">"            reduce using rule 20
	"&"            reduce using rule 20
	"|"            reduce using rule 20
	%eof           reduce using rule 20


State 79

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	expseq -> expseq ";" exp .                          (rule 62)

	";"            reduce using rule 62
	")"            reduce using rule 62
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 80

	record_create_field -> ident "=" . exp              (rule 38)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 108
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 81

	explist -> explist "," . exp                        (rule 65)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 107
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 82

	funcall -> ident "(" explist ")" .                  (rule 21)

	"to"           reduce using rule 21
	"in"           reduce using rule 21
	"end"          reduce using rule 21
	"function"     reduce using rule 21
	"var"          reduce using rule 21
	"type"         reduce using rule 21
	"then"         reduce using rule 21
	"else"         reduce using rule 21
	"do"           reduce using rule 21
	","            reduce using rule 21
	";"            reduce using rule 21
	")"            reduce using rule 21
	"]"            reduce using rule 21
	"+"            reduce using rule 21
	"-"            reduce using rule 21
	"*"            reduce using rule 21
	"/"            reduce using rule 21
	"="            reduce using rule 21
	"<>"           reduce using rule 21
	"<="           reduce using rule 21
	">="           reduce using rule 21
	"<"            reduce using rule 21
	">"            reduce using rule 21
	"&"            reduce using rule 21
	"|"            reduce using rule 21
	%eof           reduce using rule 21


State 83

	record_create_list -> record_create_list "," . record_create_field    (rule 37)

	ident          shift, and enter state 106

	record_create_fieldgoto state 105

State 84

	record_create -> ident "(" record_create_list ")" .    (rule 34)

	"to"           reduce using rule 34
	"in"           reduce using rule 34
	"end"          reduce using rule 34
	"function"     reduce using rule 34
	"var"          reduce using rule 34
	"type"         reduce using rule 34
	"then"         reduce using rule 34
	"else"         reduce using rule 34
	"do"           reduce using rule 34
	","            reduce using rule 34
	";"            reduce using rule 34
	")"            reduce using rule 34
	"]"            reduce using rule 34
	"+"            reduce using rule 34
	"-"            reduce using rule 34
	"*"            reduce using rule 34
	"/"            reduce using rule 34
	"="            reduce using rule 34
	"<>"           reduce using rule 34
	"<="           reduce using rule 34
	">="           reduce using rule 34
	"<"            reduce using rule 34
	">"            reduce using rule 34
	"&"            reduce using rule 34
	"|"            reduce using rule 34
	%eof           reduce using rule 34


State 85

	lvalue -> ident "(" exp ")" .                       (rule 67)

	"to"           reduce using rule 67
	"in"           reduce using rule 67
	"end"          reduce using rule 67
	"function"     reduce using rule 67
	"var"          reduce using rule 67
	"type"         reduce using rule 67
	"then"         reduce using rule 67
	"else"         reduce using rule 67
	"do"           reduce using rule 67
	","            reduce using rule 67
	";"            reduce using rule 67
	"("            reduce using rule 67
	")"            reduce using rule 67
	"]"            reduce using rule 67
	"."            reduce using rule 67
	"+"            reduce using rule 67
	"-"            reduce using rule 67
	"*"            reduce using rule 67
	"/"            reduce using rule 67
	"="            reduce using rule 67
	"<>"           reduce using rule 67
	"<="           reduce using rule 67
	">="           reduce using rule 67
	"<"            reduce using rule 67
	">"            reduce using rule 67
	":="           reduce using rule 67
	"&"            reduce using rule 67
	"|"            reduce using rule 67
	%eof           reduce using rule 67


State 86

	array_create -> ident "[" exp "]" . "of" exp        (rule 39)

	"of"           shift, and enter state 104


State 87

	exp -> "if" exp "then" exp . "else" exp             (rule 14)
	exp -> "if" exp "then" exp .                        (rule 15)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 15
	"in"           reduce using rule 15
	"end"          reduce using rule 15
	"function"     reduce using rule 15
	"var"          reduce using rule 15
	"type"         reduce using rule 15
	"then"         reduce using rule 15
	"else"         shift, and enter state 103
			(reduce using rule 15)

	"do"           reduce using rule 15
	","            reduce using rule 15
	";"            reduce using rule 15
	")"            reduce using rule 15
	"]"            reduce using rule 15
	"+"            shift, and enter state 33
			(reduce using rule 15)

	"-"            shift, and enter state 34
			(reduce using rule 15)

	"*"            shift, and enter state 35
			(reduce using rule 15)

	"/"            shift, and enter state 36
			(reduce using rule 15)

	"="            shift, and enter state 37
			(reduce using rule 15)

	"<>"           shift, and enter state 38
			(reduce using rule 15)

	"<="           shift, and enter state 39
			(reduce using rule 15)

	">="           shift, and enter state 40
			(reduce using rule 15)

	"<"            shift, and enter state 41
			(reduce using rule 15)

	">"            shift, and enter state 42
			(reduce using rule 15)

	"&"            shift, and enter state 43
			(reduce using rule 15)

	"|"            shift, and enter state 44
			(reduce using rule 15)

	%eof           reduce using rule 15


State 88

	tydec -> "type" ident . "=" ty                      (rule 45)

	"="            shift, and enter state 102


State 89

	vardec -> "var" ident . ":=" exp                    (rule 48)
	vardec -> "var" ident . ":" ident ":=" exp          (rule 49)

	":"            shift, and enter state 100
	":="           shift, and enter state 101


State 90

	exp -> "let" decs "in" exp . "end"                  (rule 19)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"end"          shift, and enter state 99
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 91

	fundeclist -> fundeclist fundec .                   (rule 51)

	"in"           reduce using rule 51
	"function"     reduce using rule 51
	"var"          reduce using rule 51
	"type"         reduce using rule 51


State 92

	fundec -> "function" . ident "(" tyfields ")" "=" exp    (rule 52)
	fundec -> "function" . ident "(" tyfields ")" ":" ident "=" exp    (rule 53)

	ident          shift, and enter state 98


State 93

	tydeclist -> tydeclist tydec .                      (rule 47)

	"in"           reduce using rule 47
	"function"     reduce using rule 47
	"var"          reduce using rule 47
	"type"         reduce using rule 47


State 94

	exp -> "for" ident ":=" exp . "to" exp "do" exp     (rule 17)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           shift, and enter state 97
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 95

	exp -> "while" exp "do" exp .                       (rule 16)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 16
	"in"           reduce using rule 16
	"end"          reduce using rule 16
	"function"     reduce using rule 16
	"var"          reduce using rule 16
	"type"         reduce using rule 16
	"then"         reduce using rule 16
	"else"         reduce using rule 16
	"do"           reduce using rule 16
	","            reduce using rule 16
	";"            reduce using rule 16
	")"            reduce using rule 16
	"]"            reduce using rule 16
	"+"            shift, and enter state 33
			(reduce using rule 16)

	"-"            shift, and enter state 34
			(reduce using rule 16)

	"*"            shift, and enter state 35
			(reduce using rule 16)

	"/"            shift, and enter state 36
			(reduce using rule 16)

	"="            shift, and enter state 37
			(reduce using rule 16)

	"<>"           shift, and enter state 38
			(reduce using rule 16)

	"<="           shift, and enter state 39
			(reduce using rule 16)

	">="           shift, and enter state 40
			(reduce using rule 16)

	"<"            shift, and enter state 41
			(reduce using rule 16)

	">"            shift, and enter state 42
			(reduce using rule 16)

	"&"            shift, and enter state 43
			(reduce using rule 16)

	"|"            shift, and enter state 44
			(reduce using rule 16)

	%eof           reduce using rule 16


State 96

	lvalue -> lvalue "(" exp ")" .                      (rule 68)

	"to"           reduce using rule 68
	"in"           reduce using rule 68
	"end"          reduce using rule 68
	"function"     reduce using rule 68
	"var"          reduce using rule 68
	"type"         reduce using rule 68
	"then"         reduce using rule 68
	"else"         reduce using rule 68
	"do"           reduce using rule 68
	","            reduce using rule 68
	";"            reduce using rule 68
	"("            reduce using rule 68
	")"            reduce using rule 68
	"]"            reduce using rule 68
	"."            reduce using rule 68
	"+"            reduce using rule 68
	"-"            reduce using rule 68
	"*"            reduce using rule 68
	"/"            reduce using rule 68
	"="            reduce using rule 68
	"<>"           reduce using rule 68
	"<="           reduce using rule 68
	">="           reduce using rule 68
	"<"            reduce using rule 68
	">"            reduce using rule 68
	":="           reduce using rule 68
	"&"            reduce using rule 68
	"|"            reduce using rule 68
	%eof           reduce using rule 68


State 97

	exp -> "for" ident ":=" exp "to" . exp "do" exp     (rule 17)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 118
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 98

	fundec -> "function" ident . "(" tyfields ")" "=" exp    (rule 52)
	fundec -> "function" ident . "(" tyfields ")" ":" ident "=" exp    (rule 53)

	"("            shift, and enter state 117


State 99

	exp -> "let" decs "in" exp "end" .                  (rule 19)

	"to"           reduce using rule 19
	"in"           reduce using rule 19
	"end"          reduce using rule 19
	"function"     reduce using rule 19
	"var"          reduce using rule 19
	"type"         reduce using rule 19
	"then"         reduce using rule 19
	"else"         reduce using rule 19
	"do"           reduce using rule 19
	","            reduce using rule 19
	";"            reduce using rule 19
	")"            reduce using rule 19
	"]"            reduce using rule 19
	"+"            reduce using rule 19
	"-"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	"="            reduce using rule 19
	"<>"           reduce using rule 19
	"<="           reduce using rule 19
	">="           reduce using rule 19
	"<"            reduce using rule 19
	">"            reduce using rule 19
	"&"            reduce using rule 19
	"|"            reduce using rule 19
	%eof           reduce using rule 19


State 100

	vardec -> "var" ident ":" . ident ":=" exp          (rule 49)

	ident          shift, and enter state 116


State 101

	vardec -> "var" ident ":=" . exp                    (rule 48)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 115
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 102

	tydec -> "type" ident "=" . ty                      (rule 45)

	"array"        shift, and enter state 112
	ident          shift, and enter state 113
	"{"            shift, and enter state 114

	ty             goto state 111

State 103

	exp -> "if" exp "then" exp "else" . exp             (rule 14)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 110
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 104

	array_create -> ident "[" exp "]" "of" . exp        (rule 39)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 109
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 105

	record_create_list -> record_create_list "," record_create_field .    (rule 37)

	","            reduce using rule 37
	")"            reduce using rule 37


State 106

	record_create_field -> ident . "=" exp              (rule 38)

	"="            shift, and enter state 80


State 107

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	explist -> explist "," exp .                        (rule 65)

	","            reduce using rule 65
	")"            reduce using rule 65
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 108

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	record_create_field -> ident "=" exp .              (rule 38)

	","            reduce using rule 38
	")"            reduce using rule 38
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 109

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	array_create -> ident "[" exp "]" "of" exp .        (rule 39)

	"to"           reduce using rule 39
	"in"           reduce using rule 39
	"end"          reduce using rule 39
	"function"     reduce using rule 39
	"var"          reduce using rule 39
	"type"         reduce using rule 39
	"then"         reduce using rule 39
	"else"         reduce using rule 39
	"do"           reduce using rule 39
	","            reduce using rule 39
	";"            reduce using rule 39
	")"            reduce using rule 39
	"]"            reduce using rule 39
	"+"            shift, and enter state 33
			(reduce using rule 39)

	"-"            shift, and enter state 34
			(reduce using rule 39)

	"*"            shift, and enter state 35
			(reduce using rule 39)

	"/"            shift, and enter state 36
			(reduce using rule 39)

	"="            shift, and enter state 37
			(reduce using rule 39)

	"<>"           shift, and enter state 38
			(reduce using rule 39)

	"<="           shift, and enter state 39
			(reduce using rule 39)

	">="           shift, and enter state 40
			(reduce using rule 39)

	"<"            shift, and enter state 41
			(reduce using rule 39)

	">"            shift, and enter state 42
			(reduce using rule 39)

	"&"            shift, and enter state 43
			(reduce using rule 39)

	"|"            shift, and enter state 44
			(reduce using rule 39)

	%eof           reduce using rule 39


State 110

	exp -> "if" exp "then" exp "else" exp .             (rule 14)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 14
	"in"           reduce using rule 14
	"end"          reduce using rule 14
	"function"     reduce using rule 14
	"var"          reduce using rule 14
	"type"         reduce using rule 14
	"then"         reduce using rule 14
	"else"         reduce using rule 14
	"do"           reduce using rule 14
	","            reduce using rule 14
	";"            reduce using rule 14
	")"            reduce using rule 14
	"]"            reduce using rule 14
	"+"            shift, and enter state 33
			(reduce using rule 14)

	"-"            shift, and enter state 34
			(reduce using rule 14)

	"*"            shift, and enter state 35
			(reduce using rule 14)

	"/"            shift, and enter state 36
			(reduce using rule 14)

	"="            shift, and enter state 37
			(reduce using rule 14)

	"<>"           shift, and enter state 38
			(reduce using rule 14)

	"<="           shift, and enter state 39
			(reduce using rule 14)

	">="           shift, and enter state 40
			(reduce using rule 14)

	"<"            shift, and enter state 41
			(reduce using rule 14)

	">"            shift, and enter state 42
			(reduce using rule 14)

	"&"            shift, and enter state 43
			(reduce using rule 14)

	"|"            shift, and enter state 44
			(reduce using rule 14)

	%eof           reduce using rule 14


State 111

	tydec -> "type" ident "=" ty .                      (rule 45)

	"in"           reduce using rule 45
	"function"     reduce using rule 45
	"var"          reduce using rule 45
	"type"         reduce using rule 45


State 112

	ty -> "array" . "of" ident                          (rule 56)

	"of"           shift, and enter state 125


State 113

	ty -> ident .                                       (rule 54)

	"in"           reduce using rule 54
	"function"     reduce using rule 54
	"var"          reduce using rule 54
	"type"         reduce using rule 54


State 114

	ty -> "{" . tyfields "}"                            (rule 55)

	ident          shift, and enter state 122
	","            reduce using rule 58
	"}"            reduce using rule 58

	tyfield        goto state 120
	tyfields       goto state 124

State 115

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	vardec -> "var" ident ":=" exp .                    (rule 48)

	"in"           reduce using rule 48
	"function"     reduce using rule 48
	"var"          reduce using rule 48
	"type"         reduce using rule 48
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 116

	vardec -> "var" ident ":" ident . ":=" exp          (rule 49)

	":="           shift, and enter state 123


State 117

	fundec -> "function" ident "(" . tyfields ")" "=" exp    (rule 52)
	fundec -> "function" ident "(" . tyfields ")" ":" ident "=" exp    (rule 53)

	ident          shift, and enter state 122
	","            reduce using rule 58
	")"            reduce using rule 58

	tyfield        goto state 120
	tyfields       goto state 121

State 118

	exp -> "for" ident ":=" exp "to" exp . "do" exp     (rule 17)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"do"           shift, and enter state 119
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 119

	exp -> "for" ident ":=" exp "to" exp "do" . exp     (rule 17)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 132
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 120

	tyfields -> tyfield .                               (rule 59)

	","            reduce using rule 59
	")"            reduce using rule 59
	"}"            reduce using rule 59


State 121

	fundec -> "function" ident "(" tyfields . ")" "=" exp    (rule 52)
	fundec -> "function" ident "(" tyfields . ")" ":" ident "=" exp    (rule 53)
	tyfields -> tyfields . "," tyfield                  (rule 60)

	","            shift, and enter state 127
	")"            shift, and enter state 131


State 122

	tyfield -> ident . ":" ident                        (rule 57)

	":"            shift, and enter state 130


State 123

	vardec -> "var" ident ":" ident ":=" . exp          (rule 49)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 129
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 124

	ty -> "{" tyfields . "}"                            (rule 55)
	tyfields -> tyfields . "," tyfield                  (rule 60)

	","            shift, and enter state 127
	"}"            shift, and enter state 128


State 125

	ty -> "array" "of" . ident                          (rule 56)

	ident          shift, and enter state 126


State 126

	ty -> "array" "of" ident .                          (rule 56)

	"in"           reduce using rule 56
	"function"     reduce using rule 56
	"var"          reduce using rule 56
	"type"         reduce using rule 56


State 127

	tyfields -> tyfields "," . tyfield                  (rule 60)

	ident          shift, and enter state 122

	tyfield        goto state 136

State 128

	ty -> "{" tyfields "}" .                            (rule 55)

	"in"           reduce using rule 55
	"function"     reduce using rule 55
	"var"          reduce using rule 55
	"type"         reduce using rule 55


State 129

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	vardec -> "var" ident ":" ident ":=" exp .          (rule 49)

	"in"           reduce using rule 49
	"function"     reduce using rule 49
	"var"          reduce using rule 49
	"type"         reduce using rule 49
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 130

	tyfield -> ident ":" . ident                        (rule 57)

	ident          shift, and enter state 135


State 131

	fundec -> "function" ident "(" tyfields ")" . "=" exp    (rule 52)
	fundec -> "function" ident "(" tyfields ")" . ":" ident "=" exp    (rule 53)

	":"            shift, and enter state 133
	"="            shift, and enter state 134


State 132

	exp -> "for" ident ":=" exp "to" exp "do" exp .     (rule 17)
	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)

	"to"           reduce using rule 17
	"in"           reduce using rule 17
	"end"          reduce using rule 17
	"function"     reduce using rule 17
	"var"          reduce using rule 17
	"type"         reduce using rule 17
	"then"         reduce using rule 17
	"else"         reduce using rule 17
	"do"           reduce using rule 17
	","            reduce using rule 17
	";"            reduce using rule 17
	")"            reduce using rule 17
	"]"            reduce using rule 17
	"+"            shift, and enter state 33
			(reduce using rule 17)

	"-"            shift, and enter state 34
			(reduce using rule 17)

	"*"            shift, and enter state 35
			(reduce using rule 17)

	"/"            shift, and enter state 36
			(reduce using rule 17)

	"="            shift, and enter state 37
			(reduce using rule 17)

	"<>"           shift, and enter state 38
			(reduce using rule 17)

	"<="           shift, and enter state 39
			(reduce using rule 17)

	">="           shift, and enter state 40
			(reduce using rule 17)

	"<"            shift, and enter state 41
			(reduce using rule 17)

	">"            shift, and enter state 42
			(reduce using rule 17)

	"&"            shift, and enter state 43
			(reduce using rule 17)

	"|"            shift, and enter state 44
			(reduce using rule 17)

	%eof           reduce using rule 17


State 133

	fundec -> "function" ident "(" tyfields ")" ":" . ident "=" exp    (rule 53)

	ident          shift, and enter state 138


State 134

	fundec -> "function" ident "(" tyfields ")" "=" . exp    (rule 52)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 137
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 135

	tyfield -> ident ":" ident .                        (rule 57)

	","            reduce using rule 57
	")"            reduce using rule 57
	"}"            reduce using rule 57


State 136

	tyfields -> tyfields "," tyfield .                  (rule 60)

	","            reduce using rule 60
	")"            reduce using rule 60
	"}"            reduce using rule 60


State 137

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	fundec -> "function" ident "(" tyfields ")" "=" exp .    (rule 52)

	"in"           reduce using rule 52
	"function"     reduce using rule 52
	"var"          reduce using rule 52
	"type"         reduce using rule 52
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


State 138

	fundec -> "function" ident "(" tyfields ")" ":" ident . "=" exp    (rule 53)

	"="            shift, and enter state 139


State 139

	fundec -> "function" ident "(" tyfields ")" ":" ident "=" . exp    (rule 53)

	"while"        shift, and enter state 10
	"for"          shift, and enter state 11
	"break"        shift, and enter state 12
	"let"          shift, and enter state 13
	"if"           shift, and enter state 14
	"nil"          shift, and enter state 15
	ident          shift, and enter state 16
	int_literal    shift, and enter state 17
	string_literal shift, and enter state 18
	"("            shift, and enter state 19

	exp            goto state 140
	funcall        goto state 3
	arith_exp      goto state 4
	comp_exp       goto state 5
	bool_exp       goto state 6
	record_create  goto state 7
	array_create   goto state 8
	lvalue         goto state 9

State 140

	arith_exp -> exp . "+" exp                          (rule 22)
	arith_exp -> exp . "-" exp                          (rule 23)
	arith_exp -> exp . "*" exp                          (rule 24)
	arith_exp -> exp . "/" exp                          (rule 25)
	comp_exp -> exp . "=" exp                           (rule 26)
	comp_exp -> exp . "<>" exp                          (rule 27)
	comp_exp -> exp . "<" exp                           (rule 28)
	comp_exp -> exp . ">" exp                           (rule 29)
	comp_exp -> exp . "<=" exp                          (rule 30)
	comp_exp -> exp . ">=" exp                          (rule 31)
	bool_exp -> exp . "&" exp                           (rule 32)
	bool_exp -> exp . "|" exp                           (rule 33)
	fundec -> "function" ident "(" tyfields ")" ":" ident "=" exp .    (rule 53)

	"in"           reduce using rule 53
	"function"     reduce using rule 53
	"var"          reduce using rule 53
	"type"         reduce using rule 53
	"+"            shift, and enter state 33
	"-"            shift, and enter state 34
	"*"            shift, and enter state 35
	"/"            shift, and enter state 36
	"="            shift, and enter state 37
	"<>"           shift, and enter state 38
	"<="           shift, and enter state 39
	">="           shift, and enter state 40
	"<"            shift, and enter state 41
	">"            shift, and enter state 42
	"&"            shift, and enter state 43
	"|"            shift, and enter state 44


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 70
Number of terminals: 43
Number of non-terminals: 24
Number of states: 141
